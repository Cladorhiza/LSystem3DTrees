#pragma once
#include "external_code/glm/glm.hpp"
#include "external_code/glm/gtc/matrix_transform.hpp"
#include "GLUtil.h"
#include <vector>
#include <unordered_map>
#include <sstream>
class GraphicsTurtle
{
private:
	//turtles push/pop matrix operation values
	std::vector<glm::mat4> matrixStack;
	//transforms from origin to current turtle position
	glm::mat4 currentTransformation;
	//mapped L-system symbols to turtle instructions and magnitudes
	std::unordered_map<char, std::pair<char, float>> LSystemToTurtleMappings;

public:
	GraphicsTurtle();
	
	//Turtle drawing functions
	void MoveForward(float amount, bool penDown);
	void RotateYaw(float rotation);
	void RotatePitch(float rotation);
	void RotateRoll(float rotation);
	void PushMatrix();
	void PopMatrix();
	
	/*function BuildLSystemToTurtleMappings(std::string turtleRules)
	* parameters:
	*	turtleRules: string containing the conversion information between L-System symbols
	*		and turtle symbols.
	*		format = "A-F X,B-f Z,..."
	*		A and B = L-system symbols
	*		F and f = turtle instruction
	*		X and Z = turtle instruction magnitude, leave empty if pop/push
	* purpose: To initialize a turtles instruction set to be able to understand instructions from a specific L-System string
	* returns: N/A
	*/
	void BuildLSystemToTurtleMappings(std::string turtleRules);
	
	/*function GenerateGeometryOfLSystemRuleString(std::string rules)
	* parameters:
	*	rules: string containing the output of an L-system at a generation
	*		format = "ABCDE[]DD0123OF..."
	*		just make sure every symbol present in the string has an entry in the turtles mappings
	* purpose: To generate geometry using an L-system given a ruleset already loaded into the turtle
	*	From calling BuildLSystemToTurtleMappings(std::string turtleRules) with the L-system rule mappings
	* returns: openGL vertex array id of the geometry generated by the turtle following the instructions
	*/
	unsigned GenerateGeometryOfLSystemRuleString(std::string rules);
	
	
	void Reset();
};